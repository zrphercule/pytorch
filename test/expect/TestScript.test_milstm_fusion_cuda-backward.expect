graph(%0 : Float(3, 20!)
      %1 : Float(3, 20!)
      %2 : Dynamic
      %3 : Dynamic
      %4 : Dynamic
      %5 : Dynamic
      %6 : Dynamic
      %7 : Dynamic
      %8 : Dynamic
      %9 : Dynamic
      %10 : Dynamic
      %11 : Dynamic
      %x : Float(3, 10)
      %hx : Float(3, 20)
      %cx : Float(3, 20)
      %alpha : Float(80)
      %beta_i : Float(80)
      %beta_h : Float(80)
      %18 : Float(10!, 80!)
      %Wx : Float(3, 80)
      %20 : Float(20!, 80!)
      %Uz : Float(3, 80)
      %22 : Float(3, 80)
      %ingate : Float(3, 20)
      %forgetgate : Float(3, 20)
      %cellgate : Float(3, 20)
      %outgate : Float(3, 20)
      %27 : Float(3, 20)) {
  %28 : int = prim::Constant[value=1]()
  %29 : Float(3, 20) = prim::FusionGroup_0[device=0](%27)
  %30 : Float(3, 20) = aten::add(%29, %28, %28)
  %31 : Float(3, 20) = prim::FusionGroup_1[device=0](%1, %30, %0, %outgate)
  %32 : Float(3, 20) = aten::mul(%31, %28)
  %33 : Float(3, 20) = aten::neg(%outgate)
  %34 : Float(3, 20) = aten::add(%33, %28, %28)
  %35 : Float(3, 20) = prim::FusionGroup_2[device=0](%cellgate)
  %36 : Float(3, 20) = aten::add(%35, %28, %28)
  %37 : Float(3, 20) = aten::neg(%forgetgate)
  %38 : Float(3, 20) = aten::add(%37, %28, %28)
  %39 : Float(3, 20) = aten::neg(%ingate)
  %40 : Float(3, 20) = aten::add(%39, %28, %28)
  %41 : Float(3, 80) = prim::FusionGroup_3[device=0](%40, %ingate, %38, %forgetgate, %36, %34, %outgate, %31, %cx, %32, %cellgate, %0, %27)
  %42 : Float(3, 80) = aten::mul(%41, %28)
  %43 : Float(3, 80) = aten::mul(%42, %Uz)
  %44 : Float(3, 80) = aten::mul(%42, %beta_h)
  %45 : Float(3, 80) = aten::mul(%42, %Wx)
  %46 : Float(3, 80) = aten::mul(%42, %beta_i)
  %47 : Float(3, 80) = prim::FusionGroup_4[device=0](%44, %41, %22)
  %48 : Float(3, 80), %49 : Float(3, 80) = prim::FusionGroup_5[device=0](%Wx, %41, %Uz)
  %50 : Float(3, 80) = aten::mul(%49, %alpha)
  %51 : Float(3, 80) = aten::add(%46, %50, %28)
  %52 : Float(80!, 3!) = aten::t(%47)
  %53 : Float(80, 20) = aten::mm(%52, %hx)
  %54 : Float(80!, 3!) = aten::t(%51)
  %55 : Float(80, 10) = aten::mm(%54, %x)
  return (%55, %53, %48, %45, %43, %42);
}
with prim::FusionGroup_0 = graph(%2 : Float(3, 20)) {
  %3 : Float(3, 20) = aten::mul(%2, %2)
  %1 : Float(3, 20) = aten::neg(%3)
  return (%1);
}
with prim::FusionGroup_1 = graph(%0 : Float(3, 20!)
      %5 : Float(3, 20)
      %7 : Float(3, 20!)
      %8 : Float(3, 20)) {
  %9 : Float(3, 20) = aten::mul(%7, %8)
  %6 : Float(3, 20) = aten::mul(%9, %5)
  %2 : int = prim::Constant[value=1]()
  %3 : Float(3, 20) = aten::add(%0, %6, %2)
  return (%3);
}
with prim::FusionGroup_2 = graph(%2 : Float(3, 20)) {
  %3 : Float(3, 20) = aten::mul(%2, %2)
  %1 : Float(3, 20) = aten::neg(%3)
  return (%1);
}
with prim::FusionGroup_3 = graph(%6 : Float(3, 20)
      %9 : Float(3, 20)
      %12 : Float(3, 20)
      %15 : Float(3, 20)
      %18 : Float(3, 20)
      %21 : Float(3, 20)
      %24 : Float(3, 20)
      %26 : Float(3, 20)
      %27 : Float(3, 20)
      %29 : Float(3, 20)
      %31 : Float(3, 20)
      %33 : Float(3, 20!)
      %34 : Float(3, 20)) {
  %35 : Float(3, 20) = aten::mul(%33, %34)
  %32 : Float(3, 20) = aten::mul(%29, %31)
  %30 : Float(3, 20) = aten::mul(%29, %9)
  %28 : Float(3, 20) = aten::mul(%26, %27)
  %25 : Float(3, 20) = aten::mul(%35, %24)
  %22 : Float(3, 20) = aten::mul(%25, %21)
  %19 : Float(3, 20) = aten::mul(%30, %18)
  %16 : Float(3, 20) = aten::mul(%28, %15)
  %13 : Float(3, 20) = aten::mul(%16, %12)
  %10 : Float(3, 20) = aten::mul(%32, %9)
  %7 : Float(3, 20) = aten::mul(%10, %6)
  %4 : Float(3, 80) = prim::FusedConcat[dim=1](%7, %13, %19, %22)
  return (%4);
}
with prim::FusionGroup_4 = graph(%0 : Float(3, 80)
      %4 : Float(3, 80)
      %5 : Float(3, 80)) {
  %6 : Float(3, 80) = aten::mul(%4, %5)
  %2 : int = prim::Constant[value=1]()
  %3 : Float(3, 80) = aten::add(%0, %6, %2)
  return (%3);
}
with prim::FusionGroup_5 = graph(%1 : Float(3, 80)
      %3 : Float(3, 80)
      %4 : Float(3, 80)) {
  %5 : Float(3, 80) = aten::mul(%3, %4)
  %2 : Float(3, 80) = aten::mul(%5, %1)
  return (%2, %5);
}
