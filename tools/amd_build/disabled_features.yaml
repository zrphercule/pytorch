{
  "disable_unsupported_hip_calls":
    [
      {
        "path": "aten/src/THC/THCBlas.cu",
        "functions": {
          "cublasSgemmEx": "rocblas_status_internal_error",
          "cublasSgetrfBatched": "rocblas_status_internal_error",
          "cublasDgetrfBatched": "rocblas_status_internal_error",
          "cublasSgetrsBatched": "rocblas_status_internal_error",
          "cublasDgetrsBatched": "rocblas_status_internal_error",
          "cublasSgetriBatched": "rocblas_status_internal_error",
          "cublasDgetriBatched": "rocblas_status_internal_error"
        },
      },
      {
        "path": "aten/src/THC/THCStream.cpp",
        "functions": {
          "cudaStreamCreateWithFlags": "hipSuccess",
          "cudaStreamCreateWithPriority": "hipSuccess"
        }
      },
      {
        "path": "aten/src/THC/THCAllocator.cpp",
        "functions": {
          "cudaMallocManaged": "hipSuccess"
        }
      },
      {
        "path": "aten/src/TH/generic/THTensorMath.cpp",
        "constants": {
          "_OPENMP": "_OPENMP_STUB"
        }
      },
      {
        "path": "aten/src/ATen/Context.cpp",
        "s_constants": {
          "#ifdef USE_SSE3": "#if defined(USE_SSE3) && !defined(__HIP_DEVICE_COMPILE__)"
        }
      },
      {
        "path": "aten/src/ATen/native/Distributions.h",
        "s_constants": {
          "scalar_cast": "static_cast"
        }
      },
      {
        "path": "aten/src/ATen/native/cuda/Distributions.cu",
        "s_constants": {
          "#include <nvfunctional>": ""
        }
      },
      {
        "path": "aten/src/ATen/native/cuda/Distributions.cu",
        "s_constants": {
          "#include <nvfunctional>": ""
        }
      },
      {
        "path": "aten/src/THC/THCNumerics.cuh",
        "s_constants": {
          "#ifdef __CUDA_ARCH__": "#if defined(__CUDA_ARCH__) || defined(__HIP_PLATFORM_HCC__)",
          "#if CUDA_VERSION < 9000": "#if CUDA_VERSION < 9000 && !defined(__HIP_PLATFORM_HCC__)"
        }
      },
      {
        "path": "aten/src/ATen/native/cuda/RoiPooling.cu",
        "s_constants": {
          "RoiPooling2d_forward_kernel<<<": "RoiPooling2d_forward_kernel<float><<<"
        }
      },
      {
        "path": "aten/src/THC/THCTensorRandom.cpp",
        "s_constants": {
          "struct curandStateMtgp32*": "curandStateMtgp32*"
        }
      },
      {
        "path": "aten/src/THC/THCTensorRandom.cu",
        "s_constants": {
          "struct curandStateMtgp32*": "curandStateMtgp32*"
        }
      },
      {
        "path": "aten/src/THC/THCTensorRandom.h",
        "s_constants": {
          "struct curandStateMtgp32*": "curandStateMtgp32*"
        }
      },
      {
        "path": "aten/src/THCUNN/generic/RReLU.cu",
        "s_constants": {
          "struct curandStateMtgp32*": "curandStateMtgp32*"
        }
      },
      {
        "path": "aten/src/THC/THCGenerator.hpp",
        "s_constants": {
          "struct curandStateMtgp32*": "curandStateMtgp32*",
          "struct mtgp32_kernel_params": "mtgp32_kernel_params"
        }
      },
      {
        "path": "aten/src/ATen/native/cuda/CuFFTUtils.h",
        "s_constants": {
          "#include <cufft.h>": "",
          "#include <cufftXt.h>": ""
        }
      },
      {
        "path": "aten/src/ATen/native/cuda/CuFFTPlanCache.h",
        "s_constants": {
          "#include <cufft.h>": "",
          "#include <cufftXt.h>": ""
        }
      },
      {
        "path": "aten/src/ATen/native/cuda/SpectralOps.cu",
        "s_constants": {
          "#include <cufft.h>": "",
          "#include <cufftXt.h>": ""
        }
      },
      {
        "path": "aten/src/ATen/native/cuda/RoiPooling.cu",
        "s_constants": {
            "RoiPooling2d_backward_kernel<<<": "RoiPooling2d_backward_kernel<float><<<"
        }
      },
      {
        "path": "aten/src/ATen/CUDAStream.cpp",
        "s_constants": {
            # FIXME: ROCm currently does not support multi-GPU setup; and getNumGPUs runs into a seg fault
            # ROCm Pytorch issue: https://github.com/ROCmSoftwarePlatform/pytorch/issues/31
            "getCUDAHooks().getNumGPUs()": "1",
        }
      },
      {
        "path": "aten/src/ATen/Context.h",
        "s_constants": {
            # FIXME: ROCm currently does not support multi-GPU setup; and getNumGPUs runs into a seg fault
            # ROCm Pytorch issue: https://github.com/ROCmSoftwarePlatform/pytorch/issues/31
            "detail::getCUDAHooks().getNumGPUs()": "1",
        }
      }
    ],
  "disabled_modules": [
    "aten/src/ATen/native/cuda/CuFFTUtils.h",
    "aten/src/ATen/native/cuda/CuFFTPlanCache.h",
    "aten/src/ATen/native/cuda/SpectralOps.cu",
    "aten/src/ATen/native/cuda/Distributions.cu",
  ],
  "disabled_functions": [
    {
      "path": "aten/src/ATen/cuda/CUDAApplyUtils.cuh",
      "functions": [
        "kernelPointwiseApply4"
      ]
    },
    {
      "path": "aten/src/ATen/cuda/detail/IndexUtils.cu",
      "non_device_functions": [
        "maybeOverlappingIndices"
      ]
    },
    {
      "path": "aten/src/THCUNN/LookupTable.cu",
      "functions": [
        "warpHasCollision"
      ]
    },
    {
      "path": "aten/src/ATen/native/cuda/Distributions.cu",
      "functions": [
        "_s_poisson_cuda",
        "poisson_cuda_kernel",
        "gamma_cuda_kernel"
      ]
    },
    {
      "path": "aten/src/THC/THCGeneral.cpp",
      "functions": [
        "THC_float2half",
        "THC_half2float"
      ]
    },
    {
      "path": "aten/src/THCUNN/generic/SparseLinear.cu",
      "functions": [
        "THNN_(SparseLinear_updateOutput)",
        "THNN_(SparseLinear_accGradParameters)"
      ]
    },
    {
      "path": "aten/src/THCUNN/generic/LookupTable.cu",
      "functions": [
        "THNN_(LookupTable_accGradParameters)",
        "THNN_(LookupTable_renorm)"
      ]
    },
    {
      "path": "aten/src/THCUNN/LookupTable.cu",
      "functions": [
        "calculate_norms_and_renorm"
      ]
    },
    {
      "path": "aten/src/THC/generic/THCTensor.cu",
      "functions": [
        "THCTensor_(getTextureObject)"
      ]
    },
    {
      "path": "aten/src/THC/THCTensorRandom.cu",
      "functions": [
        "THCRandom_setRNGState",
        "set_rngstate_kernel"
      ]
    }
  ]
}
